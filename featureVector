import numpy as np

def createFeature(W,x,T):
    #@param: x is a C x A matrix with C = #channels and A = #time instances
    #@param: W is a C x K matrix with C = #channels and K = # spatial filters
    #@param T: number of time samples in the decision window
    y = np.dot(W.T, x) # K x A matrix
    outputEnergy = np.zeros(len(y))
    for j in range(0,T):
        for i in range(0,len(y)):
            outputEnergy[i] += (y[i][j])**2
    f = np.log(outputEnergy)
    return f
#_______________________________________________________
#TEST:

import scipy.io
data = scipy.io.loadmat('dataSubject8.mat')
x = np.array(data.get('eegTrials'))
x_0 = x[36][0].T
print(np.shape(x_0))
W = np.array([[ -12.24452343,    6.91070249,   42.90325025,  -33.90734516,
         49.98997316,  -83.90055516, -297.42517458,  121.39256688,
        -33.27107072,  207.07522189,   61.32003329,  -49.32257302,
        256.05266172, -279.33884501, -236.84836594,  -38.68945316,
         51.94849088,  -41.88789778,   35.25691361,  277.73776811,
        -62.3126477 , -186.9863559 ,   86.10373761,  -22.60616554],[  0.14049266,  -0.42322113,  -0.60924522,   1.16918643,
         1.03302976,  -1.34573785,  10.86672289,  -0.96982623,
        -0.43364608,  -7.6129574 ,  -0.29342599,   0.46131183,
        -7.89081127,   5.96764538,   6.8782084 ,  -2.34233158,
        -0.04117534,   0.07852518,   0.62940109,  -1.61454287,
         4.56234982,  -0.38570187,  -2.18784442,   0.18385844]])
print(np.shape(W.T))
T = 7200
f = createFeature(W.T, x_0, T)
print(f)